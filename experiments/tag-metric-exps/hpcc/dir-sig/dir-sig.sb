#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=24:00:00           # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-150
#SBATCH --mem=8G                  # memory required per node - amount of memory (in bytes)
#SBATCH --job-name ds4            # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########
EXP=dir-sig
DATA_DIR=/mnt/scratch/lalejini/data/sgp-regulation/tag-metric-exps/${EXP}
CONFIG_DIR=/mnt/home/lalejini/devo_ws/signalgp-genetic-regulation/experiments/tag-metric-exps/configs-${EXP}

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=10000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Executable information
WORLD=dir-signal-exp
MATCH_METRIC=streak
MATCH_THRESH=0
REGULATOR_TYPE=mult
TAG_LEN=64

##################################
# General world parameters
CPU_CYCLES_PER_ENV_UPDATE=128
USE_FUNC_REGULATION=1
USE_GLOBAL_MEMORY=1
POP_SIZE=1000
GENERATIONS=10000
SNAPSHOT_RESOLUTION=1000
SUMMARY_RESOLUTION=100
EVAL_TRIAL_CNT=1
DUPLICATION_RATE=05

REPLICATES=50
TREATMENT_ID=0

##################################
# CONDITIONS:
# - Mut rate, maybe?
# NUM_ENV_STATES=4
# NUM_ENV_UPDATES=4
# TEST_SAMPLE_SIZE=8
##################################

ENV_STATES_8__ENV_UPDATES_8__START=$((1+$TREATMENT_ID*$REPLICATES))
ENV_STATES_8__ENV_UPDATES_8__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
ENV_STATES_10__ENV_UPDATES_10__START=$((1+$TREATMENT_ID*$REPLICATES))
ENV_STATES_10__ENV_UPDATES_10__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
ENV_STATES_16__ENV_UPDATES_16__START=$((1+$TREATMENT_ID*$REPLICATES))
ENV_STATES_16__ENV_UPDATES_16__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))

if [ ${SLURM_ARRAY_TASK_ID} -ge ${ENV_STATES_8__ENV_UPDATES_8__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${ENV_STATES_8__ENV_UPDATES_8__STOP} ] ; then
  NUM_ENV_STATES=8
  NUM_ENV_UPDATES=8
  TEST_SAMPLE_SIZE=32
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${ENV_STATES_10__ENV_UPDATES_10__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${ENV_STATES_10__ENV_UPDATES_10__STOP} ] ; then
  NUM_ENV_STATES=10
  NUM_ENV_UPDATES=10
  TEST_SAMPLE_SIZE=32
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${ENV_STATES_16__ENV_UPDATES_16__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${ENV_STATES_16__ENV_UPDATES_16__STOP} ] ; then
  NUM_ENV_STATES=16
  NUM_ENV_UPDATES=16
  TEST_SAMPLE_SIZE=32
else
 echo "run ${SEED} failed to launch" >> ${DATA_DIR}/failed_to_launch.txt
fi

MUT_RATE__FUNC_DUP=0.${DUPLICATION_RATE}
MUT_RATE__FUNC_DEL=0.${DUPLICATION_RATE}

EXEC=${WORLD}_tag-len-${TAG_LEN}_match-metric-${MATCH_METRIC}_thresh-${MATCH_THRESH}_reg-${REGULATOR_TYPE}

RUN_NAME=RUN__TW_${TAG_LEN}__NUM_STATES_${NUM_ENV_STATES}__NUM_CYCLES_${NUM_ENV_UPDATES}__DUP_RATE_${DUPLICATION_RATE}__REG_${USE_FUNC_REGULATION}__MEM_${USE_GLOBAL_MEMORY}__SEED_${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

mkdir -p ${RUN_DIR}
cd ${RUN_DIR}
cp ${CONFIG_DIR}/config.cfg .
cp ${CONFIG_DIR}/${EXEC} .

module load GCC/9.1.0-2.32

echo "./${EXEC} -SEED ${SEED} -NUM_ENV_STATES ${NUM_ENV_STATES} -NUM_ENV_UPDATES ${NUM_ENV_UPDATES} -TEST_SAMPLE_SIZE ${TEST_SAMPLE_SIZE} -CPU_CYCLES_PER_ENV_UPDATE ${CPU_CYCLES_PER_ENV_UPDATE} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY} -POP_SIZE ${POP_SIZE} -GENERATIONS ${GENERATIONS} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -EVAL_TRIAL_CNT ${EVAL_TRIAL_CNT} -MUT_RATE__FUNC_DUP ${MUT_RATE__FUNC_DUP} -MUT_RATE__FUNC_DEL ${MUT_RATE__FUNC_DEL}" > ./cmd.txt
./${EXEC} -SEED ${SEED} -NUM_ENV_STATES ${NUM_ENV_STATES} -NUM_ENV_UPDATES ${NUM_ENV_UPDATES} -TEST_SAMPLE_SIZE ${TEST_SAMPLE_SIZE} -CPU_CYCLES_PER_ENV_UPDATE ${CPU_CYCLES_PER_ENV_UPDATE} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY} -POP_SIZE ${POP_SIZE} -GENERATIONS ${GENERATIONS} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -EVAL_TRIAL_CNT ${EVAL_TRIAL_CNT} -MUT_RATE__FUNC_DUP ${MUT_RATE__FUNC_DUP} -MUT_RATE__FUNC_DEL ${MUT_RATE__FUNC_DEL} > run.log

rm ./${EXEC}