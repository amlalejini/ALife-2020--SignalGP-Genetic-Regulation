#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=24:00:00           # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-90
#SBATCH --mem=8G                  # memory required per node - amount of memory (in bytes)
#SBATCH --job-name as-tw          # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

DATA_DIR=/mnt/scratch/lalejini/data/sgp-regulation/alife-2020/alt-sig
CONFIG_DIR=/mnt/home/lalejini/devo_ws/signalgp-genetic-regulation/experiments/alife-2020-sgp-reg/configs-alt-sig

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=100800
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Executable information
WORLD=alt-signal-exp
MATCH_METRIC=streak
MATCH_THRESH=25
REGULATOR_TYPE=mult

##################################
# General world parameters
NUM_SIGNAL_RESPONSES=16
NUM_ENV_CYCLES=${NUM_SIGNAL_RESPONSES}
CPU_TIME_PER_ENV_CYCLE=256
POP_SIZE=1000
GENERATIONS=10000
SNAPSHOT_RESOLUTION=1000
SUMMARY_RESOLUTION=100
USE_FUNC_REGULATION=1
USE_GLOBAL_MEMORY=0

REPLICATES=30
TREATMENT_ID=0

##################################
# CONDITIONS:
# - TAG_LEN=32,64,128

TW_32__START=$((1+$TREATMENT_ID*$REPLICATES))
TW_32__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
TW_64__START=$((1+$TREATMENT_ID*$REPLICATES))
TW_64__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
TW_128__START=$((1+$TREATMENT_ID*$REPLICATES))
TW_128__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))

##################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${TW_32__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TW_32__STOP} ] ; then
  TAG_LEN=32
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TW_64__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TW_64__STOP} ] ; then
  TAG_LEN=64
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TW_128__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TW_128__STOP} ] ; then
  TAG_LEN=128
else
 echo "run ${SEED} failed to launch" >> ${DATA_DIR}/failed_to_launch.txt
fi

EXEC=${WORLD}_tag-len-${TAG_LEN}_match-metric-${MATCH_METRIC}_thresh-${MATCH_THRESH}_reg-${REGULATOR_TYPE}

RUN_NAME=RUN__TW_${TAG_LEN}__NUM_ENVS_${NUM_SIGNAL_RESPONSES}__REG_${USE_FUNC_REGULATION}__MEM_${USE_GLOBAL_MEMORY}__SEED_${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

mkdir -p ${RUN_DIR}
cd ${RUN_DIR}
cp ${CONFIG_DIR}/config.cfg .
cp ${CONFIG_DIR}/${EXEC} .

module load GCC/9.1.0-2.32

echo "./${EXEC} -SEED ${SEED} -NUM_SIGNAL_RESPONSES ${NUM_SIGNAL_RESPONSES} -NUM_ENV_CYCLES ${NUM_ENV_CYCLES} -CPU_TIME_PER_ENV_CYCLE ${CPU_TIME_PER_ENV_CYCLE} -POP_SIZE ${POP_SIZE} -GENERATIONS ${GENERATIONS} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY}" > ./cmd.txt
./${EXEC} -SEED ${SEED} -NUM_SIGNAL_RESPONSES ${NUM_SIGNAL_RESPONSES} -NUM_ENV_CYCLES ${NUM_ENV_CYCLES} -CPU_TIME_PER_ENV_CYCLE ${CPU_TIME_PER_ENV_CYCLE} -POP_SIZE ${POP_SIZE} -GENERATIONS ${GENERATIONS} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY} > run.log

rm ./${EXEC}