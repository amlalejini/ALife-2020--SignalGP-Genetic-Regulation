#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=16:00:00            # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-240
#SBATCH --mem=8G                  # memory required per node - amount of memory (in bytes)
#SBATCH --job-name reg-add         # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

DATA_DIR=/mnt/scratch/lalejini/data/sgp-regulation/reg-type-exps
CONFIG_DIR=/mnt/home/lalejini/devo_ws/signalgp-genetic-regulation/hpcc/reg-type-exps/configs

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=1000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
WORLD=alt-signal-exp
MATCH_METRIC=streak
MATCH_THRESH=25
ENV_CYCLES_PER_SIG_RESP=2

# World config params
GENERATIONS=10000
SUMMARY_RESOLUTION=100
SNAPSHOT_RESOLUTION=${GENERATIONS}

REPLICATES=30
TREATMENT_ID=0

##################################
# CONDITIONS:
# REGULATOR_TYPE=[add/mult]
# NUM_SIGNAL_RESPONSES=[4/8/16/32]
#  - NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))

REG_TYPE_MULT__ENV_RESPONSES_4__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_TYPE_MULT__ENV_RESPONSES_4__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_TYPE_MULT__ENV_RESPONSES_8__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_TYPE_MULT__ENV_RESPONSES_8__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_TYPE_MULT__ENV_RESPONSES_16__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_TYPE_MULT__ENV_RESPONSES_16__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_TYPE_MULT__ENV_RESPONSES_32__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_TYPE_MULT__ENV_RESPONSES_32__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))

REG_TYPE_ADD__ENV_RESPONSES_4__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_TYPE_ADD__ENV_RESPONSES_4__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_TYPE_ADD__ENV_RESPONSES_8__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_TYPE_ADD__ENV_RESPONSES_8__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_TYPE_ADD__ENV_RESPONSES_16__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_TYPE_ADD__ENV_RESPONSES_16__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_TYPE_ADD__ENV_RESPONSES_32__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_TYPE_ADD__ENV_RESPONSES_32__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))

##################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_TYPE_MULT__ENV_RESPONSES_4__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_TYPE_MULT__ENV_RESPONSES_4__STOP} ] ; then
  REGULATOR_TYPE=mult
  NUM_SIGNAL_RESPONSES=4
  NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_TYPE_MULT__ENV_RESPONSES_8__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_TYPE_MULT__ENV_RESPONSES_8__STOP} ] ; then
  REGULATOR_TYPE=mult
  NUM_SIGNAL_RESPONSES=8
  NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_TYPE_MULT__ENV_RESPONSES_16__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_TYPE_MULT__ENV_RESPONSES_16__STOP} ] ; then
  REGULATOR_TYPE=mult
  NUM_SIGNAL_RESPONSES=16
  NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_TYPE_MULT__ENV_RESPONSES_32__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_TYPE_MULT__ENV_RESPONSES_32__STOP} ] ; then
  REGULATOR_TYPE=mult
  NUM_SIGNAL_RESPONSES=32
  NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_TYPE_ADD__ENV_RESPONSES_4__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_TYPE_ADD__ENV_RESPONSES_4__STOP} ] ; then
  REGULATOR_TYPE=add
  NUM_SIGNAL_RESPONSES=4
  NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_TYPE_ADD__ENV_RESPONSES_8__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_TYPE_ADD__ENV_RESPONSES_8__STOP} ] ; then
  REGULATOR_TYPE=add
  NUM_SIGNAL_RESPONSES=8
  NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_TYPE_ADD__ENV_RESPONSES_16__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_TYPE_ADD__ENV_RESPONSES_16__STOP} ] ; then
  REGULATOR_TYPE=add
  NUM_SIGNAL_RESPONSES=16
  NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_TYPE_ADD__ENV_RESPONSES_32__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_TYPE_ADD__ENV_RESPONSES_32__STOP} ] ; then
  REGULATOR_TYPE=add
  NUM_SIGNAL_RESPONSES=32
  NUM_ENV_CYCLES=$(($ENV_CYCLES_PER_SIG_RESP*$NUM_SIGNAL_RESPONSES))
else
 echo "run ${SEED} failed to launch" >> ${DATA_DIR}/failed_to_launch.txt
fi

##################################

EXEC=${WORLD}_match-metric-${MATCH_METRIC}_thresh-${MATCH_THRESH}_reg-${REGULATOR_TYPE}

RUN_NAME=RUN__MATCH_METRIC_${MATCH_METRIC}__REG_${REGULATOR_TYPE}__NUM_SIGNAL_RESPONSES_${NUM_SIGNAL_RESPONSES}__NUM_ENV_CYCLES_${NUM_ENV_CYCLES}__SEED_${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

module load GCC/9.1.0-2.32;

mkdir -p ${RUN_DIR}
cd ${RUN_DIR}
cp ${CONFIG_DIR}/config.cfg .
cp ${CONFIG_DIR}/${EXEC} .

echo "./${EXEC} -SEED ${SEED} -GENERATIONS ${GENERATIONS} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -NUM_SIGNAL_RESPONSES ${NUM_SIGNAL_RESPONSES} -NUM_ENV_CYCLES ${NUM_ENV_CYCLES}" > ./cmd.txt
./${EXEC} -SEED ${SEED} -GENERATIONS ${GENERATIONS} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -NUM_SIGNAL_RESPONSES ${NUM_SIGNAL_RESPONSES} -NUM_ENV_CYCLES ${NUM_ENV_CYCLES} > run.log

rm ./${EXEC}