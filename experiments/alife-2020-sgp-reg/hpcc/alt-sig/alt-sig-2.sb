#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=4:00:00           # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-200
#SBATCH --mem=8G                  # memory required per node - amount of memory (in bytes)
#SBATCH --job-name as-2          # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

DATA_DIR=/mnt/scratch/lalejini/data/sgp-regulation/alife-2020/alt-sig-fresh
CONFIG_DIR=/mnt/home/lalejini/devo_ws/signalgp-genetic-regulation/experiments/alife-2020-sgp-reg/configs-alt-sig

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=100000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Executable information
WORLD=alt-signal-exp
MATCH_METRIC=streak
MATCH_THRESH=25
REGULATOR_TYPE=mult
TAG_LEN=64

##################################
# General world parameters
NUM_SIGNAL_RESPONSES=2
NUM_ENV_CYCLES=${NUM_SIGNAL_RESPONSES}
CPU_TIME_PER_ENV_CYCLE=256
POP_SIZE=1000
GENERATIONS=10000
SNAPSHOT_RESOLUTION=1000
SUMMARY_RESOLUTION=100
TOURNAMENT_SIZE=8

REPLICATES=50
TREATMENT_ID=0

##################################
# CONDITIONS:
# - USE_FUNC_REGULATION=[0,1]
# - USE_GLOBAL_MEMORY=[0,1]

REG_1__MEM_0__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_1__MEM_0__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_1__MEM_1__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_1__MEM_1__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_0__MEM_1__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_0__MEM_1__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
REG_0__MEM_0__START=$((1+$TREATMENT_ID*$REPLICATES))
REG_0__MEM_0__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))

##################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_1__MEM_0__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_1__MEM_0__STOP} ] ; then
  USE_FUNC_REGULATION=1
  USE_GLOBAL_MEMORY=0
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_1__MEM_1__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_1__MEM_1__STOP} ] ; then
  USE_FUNC_REGULATION=1
  USE_GLOBAL_MEMORY=1
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_0__MEM_1__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_0__MEM_1__STOP} ] ; then
  USE_FUNC_REGULATION=0
  USE_GLOBAL_MEMORY=1
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${REG_0__MEM_0__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${REG_0__MEM_0__STOP} ] ; then
  USE_FUNC_REGULATION=0
  USE_GLOBAL_MEMORY=0
else
 echo "run ${SEED} failed to launch" >> ${DATA_DIR}/failed_to_launch.txt
fi

EXEC=${WORLD}_tag-len-${TAG_LEN}_match-metric-${MATCH_METRIC}_thresh-${MATCH_THRESH}_reg-${REGULATOR_TYPE}

RUN_NAME=RUN__TW_${TAG_LEN}__NUM_ENVS_${NUM_SIGNAL_RESPONSES}__REG_${USE_FUNC_REGULATION}__MEM_${USE_GLOBAL_MEMORY}__SEED_${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

mkdir -p ${RUN_DIR}
cd ${RUN_DIR}
cp ${CONFIG_DIR}/config.cfg .
cp ${CONFIG_DIR}/${EXEC} .

echo "./${EXEC} -SEED ${SEED} -TOURNAMENT_SIZE ${TOURNAMENT_SIZE} -NUM_SIGNAL_RESPONSES ${NUM_SIGNAL_RESPONSES} -NUM_ENV_CYCLES ${NUM_ENV_CYCLES} -CPU_TIME_PER_ENV_CYCLE ${CPU_TIME_PER_ENV_CYCLE} -POP_SIZE ${POP_SIZE} -GENERATIONS ${GENERATIONS} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY}" > ./cmd.txt
./${EXEC} -SEED ${SEED} -TOURNAMENT_SIZE ${TOURNAMENT_SIZE} -NUM_SIGNAL_RESPONSES ${NUM_SIGNAL_RESPONSES} -NUM_ENV_CYCLES ${NUM_ENV_CYCLES} -CPU_TIME_PER_ENV_CYCLE ${CPU_TIME_PER_ENV_CYCLE} -POP_SIZE ${POP_SIZE} -GENERATIONS ${GENERATIONS} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY} > run.log

rm ./${EXEC}