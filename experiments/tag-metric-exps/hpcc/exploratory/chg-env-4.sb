#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=16:00:00           # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-250
#SBATCH --mem=8G                  # memory required per node - amount of memory (in bytes)
#SBATCH --job-name chgenv4          # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

DATA_DIR=/mnt/scratch/lalejini/data/sgp-regulation/tag-metric-exps/chg-env
CONFIG_DIR=/mnt/home/lalejini/devo_ws/signalgp-genetic-regulation/experiments/tag-metric-exps/configs-chg-env

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=90000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Executable information
WORLD=chg-env-exp
MATCH_THRESH=25
REGULATOR_TYPE=mult

##################################
# General world parameters
NUM_ENV_STATES=4
NUM_ENV_UPDATES=${NUM_ENV_STATES}

CPU_CYCLES_PER_ENV_UPDATE=256
GENERATIONS=1000
POP_SIZE=1000
SUMMARY_RESOLUTION=100
SNAPSHOT_RESOLUTION=${GENERATIONS}
USE_FUNC_REGULATION=1
USE_GLOBAL_MEMORY=0

REPLICATES=50
TREATMENT_ID=0

##################################
# CONDITIONS:
# - MATCH_METRIC=[streak/integer/hash/hamming/streak-exact]

METRIC_STREAK__START=$((1+$TREATMENT_ID*$REPLICATES))
METRIC_STREAK__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
METRIC_INTEGER__START=$((1+$TREATMENT_ID*$REPLICATES))
METRIC_INTEGER__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
METRIC_HASH__START=$((1+$TREATMENT_ID*$REPLICATES))
METRIC_HASH__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
METRIC_HAMMING__START=$((1+$TREATMENT_ID*$REPLICATES))
METRIC_HAMMING__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
METRIC_STREAK_EXACT__START=$((1+$TREATMENT_ID*$REPLICATES))
METRIC_STREAK_EXACT__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))

##################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${METRIC_STREAK__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${METRIC_STREAK__STOP} ] ; then
  MATCH_METRIC=streak
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${METRIC_INTEGER__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${METRIC_INTEGER__STOP} ] ; then
  MATCH_METRIC=integer
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${METRIC_HASH__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${METRIC_HASH__STOP} ] ; then
  MATCH_METRIC=hash
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${METRIC_HAMMING__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${METRIC_HAMMING__STOP} ] ; then
  MATCH_METRIC=hamming
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${METRIC_STREAK_EXACT__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${METRIC_STREAK_EXACT__STOP} ] ; then
  MATCH_METRIC=streak-exact
else
 echo "run ${SEED} failed to launch" >> ${DATA_DIR}/failed_to_launch.txt
fi

EXEC=${WORLD}_match-metric-${MATCH_METRIC}_thresh-${MATCH_THRESH}_reg-${REGULATOR_TYPE}

RUN_NAME=RUN__ENV_STATES_${NUM_ENV_STATES}__METRIC_${MATCH_METRIC}__SEED_${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

mkdir -p ${RUN_DIR}
cd ${RUN_DIR}
cp ${CONFIG_DIR}/config.cfg .
cp ${CONFIG_DIR}/${EXEC} .


echo "./${EXEC} -SEED ${SEED} -NUM_ENV_STATES ${NUM_ENV_STATES} -NUM_ENV_UPDATES ${NUM_ENV_UPDATES} -CPU_CYCLES_PER_ENV_UPDATE ${CPU_CYCLES_PER_ENV_UPDATE} -GENERATIONS ${GENERATIONS} -POP_SIZE ${POP_SIZE} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY}" > ./cmd.txt
./${EXEC} -SEED ${SEED} -NUM_ENV_STATES ${NUM_ENV_STATES} -NUM_ENV_UPDATES ${NUM_ENV_UPDATES} -CPU_CYCLES_PER_ENV_UPDATE ${CPU_CYCLES_PER_ENV_UPDATE} -GENERATIONS ${GENERATIONS} -POP_SIZE ${POP_SIZE} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY} > run.log

rm ./${EXEC}