#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=48:00:00           # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-150
#SBATCH --mem=8G                  # memory required per node - amount of memory (in bytes)
#SBATCH --job-name mc-5x5         # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

DATA_DIR=/mnt/scratch/lalejini/data/sgp-regulation/mc-dem-reg
CONFIG_DIR=/mnt/home/lalejini/devo_ws/signalgp-genetic-regulation/experiments/dem-reg-exps/configs-mc-diff

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=21000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Executable information
WORLD=mc-reg-exp
MATCH_METRIC=streak
MATCH_THRESH=25
REGULATOR_TYPE=mult

##################################
# General world parameters
DEME_WIDTH=5
DEME_HEIGHT=5
NUM_RESPONSE_TYPES=5
DEVELOPMENT_PHASE_CPU_TIME=512

GENERATIONS=5000
POP_SIZE=500
SUMMARY_RESOLUTION=100
SNAPSHOT_RESOLUTION=${GENERATIONS}

REPLICATES=50
TREATMENT_ID=0

##################################
# CONDITIONS:
# - Regulatory mechanisms: func-reg, memory, none
#   - (1) USE_FUNC_REGULATION 1 USE_GLOBAL_MEMORY 0
#   - (2) USE_FUNC_REGULATION 0 USE_GLOBAL_MEMORY 1
#   - (3) USE_FUNC_REGULATION 0 USE_GLOBAL_MEMORY 0

FUNC_REG_0__MEM_1__START=$((1+$TREATMENT_ID*$REPLICATES))
FUNC_REG_0__MEM_1__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
FUNC_REG_1__MEM_0__START=$((1+$TREATMENT_ID*$REPLICATES))
FUNC_REG_1__MEM_0__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))
FUNC_REG_0__MEM_0__START=$((1+$TREATMENT_ID*$REPLICATES))
FUNC_REG_0__MEM_0__STOP=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))
((TREATMENT_ID++))

if [ ${SLURM_ARRAY_TASK_ID} -ge ${FUNC_REG_0__MEM_1__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${FUNC_REG_0__MEM_1__STOP} ] ; then
  USE_FUNC_REGULATION=0
  USE_GLOBAL_MEMORY=1
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${FUNC_REG_1__MEM_0__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${FUNC_REG_1__MEM_0__STOP} ] ; then
  USE_FUNC_REGULATION=1
  USE_GLOBAL_MEMORY=0
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${FUNC_REG_0__MEM_0__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${FUNC_REG_0__MEM_0__STOP} ] ; then
  USE_FUNC_REGULATION=0
  USE_GLOBAL_MEMORY=0
else
 echo "run ${SEED} failed to launch" >> ${DATA_DIR}/failed_to_launch.txt
fi

EXEC=${WORLD}_match-metric-${MATCH_METRIC}_thresh-${MATCH_THRESH}_reg-${REGULATOR_TYPE}
RUN_NAME=RUN__W_${DEME_WIDTH}__H_${DEME_HEIGHT}__RESP_${NUM_RESPONSE_TYPES}__FUNC_REG_${USE_FUNC_REGULATION}__MEM_${USE_GLOBAL_MEMORY}__SEED_${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

mkdir -p ${RUN_DIR}
cd ${RUN_DIR}
cp ${CONFIG_DIR}/config.cfg .
cp ${CONFIG_DIR}/${EXEC} .

echo "./${EXEC} -SEED ${SEED} -DEME_WIDTH ${DEME_WIDTH} -DEME_HEIGHT ${DEME_HEIGHT} -NUM_RESPONSE_TYPES ${NUM_RESPONSE_TYPES} -DEVELOPMENT_PHASE_CPU_TIME ${DEVELOPMENT_PHASE_CPU_TIME} -GENERATIONS ${GENERATIONS} -POP_SIZE ${POP_SIZE} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY}" > cmd.txt
./${EXEC} -SEED ${SEED} -DEME_WIDTH ${DEME_WIDTH} -DEME_HEIGHT ${DEME_HEIGHT} -NUM_RESPONSE_TYPES ${NUM_RESPONSE_TYPES} -DEVELOPMENT_PHASE_CPU_TIME ${DEVELOPMENT_PHASE_CPU_TIME} -GENERATIONS ${GENERATIONS} -POP_SIZE ${POP_SIZE} -SUMMARY_RESOLUTION ${SUMMARY_RESOLUTION} -SNAPSHOT_RESOLUTION ${SNAPSHOT_RESOLUTION} -USE_FUNC_REGULATION ${USE_FUNC_REGULATION} -USE_GLOBAL_MEMORY ${USE_GLOBAL_MEMORY} > run.log

rm ./${EXEC}